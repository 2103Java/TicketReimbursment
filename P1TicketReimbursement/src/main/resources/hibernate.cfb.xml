<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
 <hibernate-configuration>
	 	<session-factory>
	 		<!-- JDBC stuff -->
	 		<property name = "hibernate.connection.username">postgres</property>
	 		<property name = "hibernate.connection.password">password</property>
	 		<property name = "hibernate.connection.url">jdbc:postgresql://database-1.csd4vggmmxv0.us-east-2.rds.amazonaws.com:5432/postgres</property>
	 		
	 		<property name = "hibernate.connection.driver_class">org.postgresql.Driver</property>
	 		<property name = "hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
	 		
	 		<!--
	 		<property name="hibernate.connection.url">jdbc:mysql://database-2.cqoseij0k35s.us-east-2.rds.amazonaws.com:3306/Planets</property>
	 		<property name = "hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
	 		<property name = "hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</property>
	 		-->
	 		<!-- Additional Hibernate Options -->
	 		
	 		<property name = "hibernate.show_sql">true</property> <!-- Show the sql scripts being executed -->
	 		<property name="hibernate.format_sql">true</property> <!-- makes it more human readable -->
	 		
	 		<!--  Connection Pool
	 			A method of speeding up database calls.
	 			Hibernate will create n connections to the database when it starts up (default is 20)
	 			Everytime a session is created, a session will "borrow" an active connection
	 			When you close a session, the connection is freed up for another session to use.
	 		 -->
	 		
	 		 <property name = "hibernate.connection.pool_size">10</property>
	 		
	 		 <!--  4 settings for hbm2ddl.auto
	 		 		CREATE : drops all existing tables & other objects with names you have provided in the annotations.
	 		 					Then Hibernate will create you schema from scratch. (Not the best for production, only for Dev purposes)
	 		 		VALIDATE: Hibernate checks to make sure the schema exists as expected before operating.
	 		 		
	 		 		UPDATE: Hibernate will not delete anything, it'll only add/modify existing schema elemetns. So the schema works with
	 		 				the Hibenrate schema.
	 		 		NONE: nothing
	 		 		
	 		 -->
	 		 <property name="hibernate.hbm2ddl.auto">none</property>
	 		 
	 		
	 		 <mapping class = "com.revature.models.Employee"/>
	 		 <mapping class = "com.revature.models.FinanceManager"/>
	 		 <mapping class = "com.revature.models.Ticket"/>
	 		 
	 	</session-factory>
	 </hibernate-configuration>